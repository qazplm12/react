컴포넌트 합성 : 여러개의 컴포넌트를 합쳐서 새로운 컴포넌트를 만드는 것
Containment : 하위 컴포넌트를 포함하는 형태의 합성 방식 (포함)
Specialization : 범용적인 개념은 구별이 되도록 구체화하는 것 (구체화)

컨텍스트 : 컴포넌트의 데이터를 컴포넌트 트리를 통해서 바로 원하는 컴포넌트에 전달하는 객체

React.createContext(기본값) : 컨텍스트 객체를 생성, 기본값 반드시 설정
 - 컨텍스트 객체 하나에 하나의 데이터만 저장할 수 있음
 - 배열 및 object 타입을 사용 시 여러개의 데이터를 전달할 수 있음
Provider : 생성된 컨텍스트를 사용할 자식 컴포넌트를 지정
 - value : 전달하고자 하는 데이터를 지정
 - 여러개의 Provider를 사용하는 것이 가능함
 - 사용법 :
 <컨텍스트명.Provider value={전달할 데이터}>
    <자손 컴포넌트 />
 </컨텍스트명>
Consumer : Provider로 감싸진 자손 컴포넌트 중 저장된 데이터를 사용하고자 할 경우 사용
 - 여러개의 Consumer를 사용하는 것이 가능함
 - 사용법 :
 <컨텍스트명.Consumer>
    <{value => <컴포넌트명 속성명 ={value} /> }
 </컨텍스트명.Consumer>

Context.displayName : 컨텍스트의 이름을 지정할 때 사용함
 - 개발자 도구의 Components에서 displayName으로 지정한 이름이 출력됨
 - <지정한 이름.Provider>, <지정한 이름.Consumer>
 - 사용법 : 컨텍스트명.displayName = '사용하려는 이름';

useContext : 컨텍스트를 사용하기 위한 리액트의 hooks
 - useContext를 사용하면 Consumer를 입력하지 않아도 됨
 - 사용법 :
 const 변수명 = useContext(컨텍스트명);

Axios : node.js에서 비동기 통신을 위한 라이브러리, 내부적으로 promise를 사용함
 - axios는 rest 방식 통신을 지원함
 - get(url, config) : get 방식으로 서버에 데이터 요청
 - post(url, data[ , config]) : post 방식으로 서버에 데이터 전달
 - put(url, data[ , config]) : put 방식으로 서버에 데이터 전달
 - delete(url, data[ , config]) : delete 방식으로 서버에 데이터 전달
 - options(url, config) : axios 객체 생성시 설정 정보를 변경할 수 있음

 - then() : 정상적으로 통신이 성공했을 경우 실행되는 함수
 - catch() : 통신이 실패했을 경우 실행되는 콜백 함수

 - async/await와 함께 사용 시 then()이 필요할 경우 나중에 호출할 수 있음
 - async/await와 함께 사용 시 예외처리를 try/catch로
응답 객체 : 요청에 대한 응답 객체가 json 방식으로 전달됨
 - data{} : 서버에서 제공한 데이터, json 타입
 - status : 서버와의 통신 응답 신호, 200 : ok, 300 : redirect, 400 : 리소스 없음, 500 : 서버 내부 오류
 - statusText : 서버와의 응답 메시지
 - headers{} : 서버에서 응답한 헤더 정보
 - config{} : 서버에 요청 시 axios의 설정 정보
 - request{} : 응답을 생성한 요청
사용법 :
 - npm install axios; // 사용할 프로젝트에 axios 라이브러리 추가
 - import axios from 'axios'; // 사용할 컴포넌트에서 axios 라이브러리 임포트

 - axios({
    method : 'get|post|put|delete',
    url : 'url',
    data: {
        param1: 'data1',
        param2: 'data2',
    },
 });

 - axios.get(url)
    .then(function(req){
        성공시 실행할 소스코드;
    })
    .catch(function(err){
        실패시 실행할 소스코드;
    });

 - axios.post(url, {
    param1: 'data1',
    param2: 'data2',
 })
    .then(function(req){
        성공시 실행할 소스코드;
    })
    .catch(function(err){
        실패시 실행할 소스코드;
    });



















